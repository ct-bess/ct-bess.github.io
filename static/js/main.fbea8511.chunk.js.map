{"version":3,"sources":["logo.jpeg","those-cards.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","GoButton","className","this","props","onClick","text","React","Component","App","handleClick","i","window","location","setState","prev","aboutHidden","console","warn","bind","state","yeet","interval","setInterval","tick","src","logo","alt","hidden","id","cards","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,oOCKrCC,G,uLAEF,OACE,4BACEC,UAAcC,KAAKC,MAAMF,UACzBG,QAAYF,KAAKC,MAAMC,SAErBF,KAAKC,MAAME,U,GAPEC,IAAMC,YA4HdC,E,YA5Gb,WAAaL,GAAS,IAAD,8BACnB,4CAAOA,KAkBTM,YAAc,SAAEC,GACd,OAAQA,GACN,KAAK,EACHC,OAAOC,SAAW,cAClB,MACF,KAAK,EACH,EAAKC,UAAU,SAAAC,GAAI,MAAK,CAAEC,aAAcD,EAAKC,gBAC7C,MACF,QACEC,QAAQC,KAAM,oBA1BlB,EAAKR,YAAc,EAAKA,YAAYS,KAAjB,gBACnB,EAAKC,MAAQ,CACXC,KAAM,EACNL,aAAa,GALI,E,iFASA,IAAD,OAClBb,KAAKmB,SAAWC,aAAa,kBAAM,EAAKC,SAAQ,O,6BAIhDrB,KAAKW,UAAU,SAAAC,GAAI,MAAK,CACtBM,KAAMN,EAAKM,KAAO,Q,+BAkBZ,IAAD,OAEDA,EAAOlB,KAAKiB,MAAMC,KAClBL,EAAcb,KAAKiB,MAAMJ,YAE/B,OAEE,6BAEE,gCACE,yBAAKS,IAAQC,IAAOC,IAAI,SACxB,8CAGA,8DAKF,4DAIA,6BACE,yBAAKzB,UAAY,SACf,kBAAC,EAAD,CACEI,KAASU,EAAc,WAAa,eACpCX,QAAY,kBAAM,EAAKK,YAAa,IACpCR,UAAc,aAEhB,yBAAK0B,OAAWZ,GAAhB,mBAKF,6BACE,uBAAGa,GAAK,WAAR,6BAGA,kBAAC,EAAD,CACEvB,KAAS,SACTD,QAAY,kBAAM,EAAKK,YAAa,IACpCR,UAAc,SAGlB,yBAAKA,UAAY,WACf,uBAAG2B,GAAK,UAAU3B,UAAY,WAA9B,iBAGA,kBAAC,EAAD,CACEI,KAAS,QACTD,QAAY,kBAAM,EAAKK,aAAc,IACrCR,UAAc,WAKpB,6BACE,uBAAG2B,GAAK,WAAR,mCACmCR,EADnC,cAKF,gCACE,yBAAKI,IAAQK,IAAQH,IAAM,gB,GAnGnBpB,IAAMC,WCPJuB,QACW,cAA7BnB,OAAOC,SAASmB,UAEe,UAA7BpB,OAAOC,SAASmB,UAEhBpB,OAAOC,SAASmB,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.fbea8511.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.d53e473c.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/those-cards.67f34ec8.png\";","import React from 'react';\nimport logo from './logo.jpeg';\nimport cards from './those-cards.png';\nimport './App.css';\n\nclass GoButton extends React.Component {\n  render() {\n    return(\n      <button\n        className = { this.props.className }\n        onClick = { this.props.onClick }\n      >\n        { this.props.text }\n      </button>\n\n    );\n  }\n}\n\nclass App extends React.Component {\n\n  constructor( props ) {\n    super( props );\n    this.handleClick = this.handleClick.bind( this );\n    this.state = {\n      yeet: 0,\n      aboutHidden: true\n    };\n  }\n\n  componentDidMount() {\n    this.interval = setInterval( () => this.tick(), 1000 );\n  }\n\n  tick() {\n    this.setState( prev => ({\n      yeet: prev.yeet + 1\n    }));\n  }\n\n  handleClick = ( i ) => {\n    switch( i ) {\n      case 0:\n        window.location = \"YYYYYY.html\";\n        break;\n      case 1:\n        this.setState( prev => ({ aboutHidden: !prev.aboutHidden }));\n        break;\n      default:\n        console.warn( \"Oww that hurts\" );\n        break;\n    }\n  }\n\n  render() {\n\n    const yeet = this.state.yeet;\n    const aboutHidden = this.state.aboutHidden;\n\n    return (\n\n      <div>\n\n        <header>\n          <img src = { logo } alt=\"logo\" />\n          <h4>\n            Connor Bessell\n          </h4>\n          <p>\n            Welcome to my very clean site!\n          </p>\n        </header>\n\n        <code>\n          Early Access btw build 2.0\n        </code>\n\n        <div>\n          <div className = \"orbit\">\n            <GoButton\n              text = { aboutHidden ? \"$ whoami\" : \"Tell Me Less\" }\n              onClick = { () => this.handleClick( 1 ) }\n              className = { \"tellMore\" }\n            />\n            <div hidden = { aboutHidden }>\n              HELLO FRIENDS.\n            </div>\n          </div>\n\n          <div>\n            <b id = \"preText\">\n              The VVVVVV inspired work:\n            </b>\n            <GoButton\n              text = { \"YYYYYY\" }\n              onClick = { () => this.handleClick( 0 ) }\n              className = { \"YYY\" }\n            />\n          </div>\n          <div className = \"flashBG\">\n            <b id = \"preText\" className = \"flashFG\">\n              More To Come!\n            </b>\n            <GoButton\n              text = { \"?????\" }\n              onClick = { () => this.handleClick( -1 ) }\n              className = { \"more\" }\n            />\n          </div>\n        </div>\n\n        <div>\n          <p id = \"papyrus\">\n            You have endured this site for: {yeet} seconds!\n          </p>\n        </div>\n\n        <footer>\n          <img src = { cards } alt = \"cards\" />\n        </footer>\n\n      </div>\n\n    );\n\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}